FROM docker-registry.qualcomm.com/library/nvidia/cuda:11.6.2-cudnn8-devel-ubuntu20.04

ARG DEBIAN_FRONTEND=noninteractive
ARG APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn

RUN mv /etc/apt/sources.list.d/cuda.list /etc/apt/sources.list.d/cuda.list.orig && \
    apt-get update > /dev/null && \
    apt-get install -y --no-install-recommends apt-utils && \
    apt-key del --no-tty 7fa2af80 && \
    apt-key adv --no-tty --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub && \
    apt-key adv --no-tty --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub && \
    apt-get update > /dev/null && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update > /dev/null && \
    apt-get install --no-install-recommends -y \
        # Bare minimum Packages
        ca-certificates \
        git \
        ssh \
        sudo \
        wget \
        xterm \
        xauth > /dev/null && \
        rm -rf /var/lib/apt/lists/*

# Modified version of bash.bashrc that adjusts the prompt
COPY bash.bashrc /etc/
RUN chmod 644 /etc/bash.bashrc

COPY profile.global /usr/local/etc/
RUN chmod 555 /usr/local/etc/profile.global

# Add sudo support
RUN echo "%users ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers

RUN apt-get update -y > /dev/null && \
    apt-get install --no-install-recommends -y \
        python3.8 \
        python3-pip \
        libffi-dev && \
        rm -rf /var/lib/apt/lists/*

# Register the version in alternatives
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1
# Set python 3.8 as the default python
RUN update-alternatives --set python3 /usr/bin/python3.8

# Upgrade Python3 pip and install some more packages
RUN python3 -m pip --no-cache-dir install --upgrade \
        pip \
        setuptools==41.0.1 \
        numpy==1.19.5

# Ubuntu packages for pytorch aimet
RUN dpkg --add-architecture i386
RUN apt-get update > /dev/null && \
    apt-get install --no-install-recommends -y \
        build-essential \
        emacs \
        environment-modules \
        less \
        libavcodec-dev \
        libavformat-dev \
        libeigen3-dev \
        libgtest-dev \
        libgtk2.0-dev \
        libsox-dev \
        libsox-fmt-all \
        libstdc++6:i386 \
        libswscale-dev \
        libxtst6 \
        lsb-release \
        meld \
        nano \
        pkg-config \
        python3-tk \
        sox \
        tree \
        vim && \
        rm -rf /var/lib/apt/lists/*

RUN cd /tmp && \
    wget https://github.com/Kitware/CMake/releases/download/v3.19.3/cmake-3.19.3-Linux-x86_64.sh && \
    mkdir /opt/cmake && \
    sh cmake-3.19.3-Linux-x86_64.sh --prefix=/opt/cmake --skip-license

RUN ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
RUN ln -s /opt/cmake/bin/ctest /usr/local/bin/ctest
RUN ln -s /opt/cmake/bin/cpack /usr/local/bin/cpack

ENV PATH=/usr/local/bin:$PATH

EXPOSE 25000
RUN apt-get update && apt-get install -y openssh-server && rm -rf /var/lib/apt/lists/*
RUN mkdir /var/run/sshd

RUN apt-get update && apt-get install -y liblapacke liblapacke-dev && rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y libjpeg8-dev && \
    rm -rf /var/lib/apt/lists/*

# Set up symlink to point to the correct python version
RUN ln -sf /usr/bin/python3.8 /usr/bin/python
RUN ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib

RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -i 's/Port 22/Port 25000/' /etc/ssh/sshd_config

# SSH login fix. Otherwise user is kicked off after login
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd

# Opencv (Installing cv2 after numpy package is installed)
# Ref: https://docs.opencv.org/3.1.0/d7/d9f/tutorial_linux_install.html
COPY opencv_320_python38.patch /tmp
RUN wget -q https://github.com/Itseez/opencv/archive/3.2.0.tar.gz -O /tmp/3.2.0.tar.gz > /dev/null && \
    tar -C /tmp -xvf /tmp/3.2.0.tar.gz > /dev/null && \
    patch /tmp/opencv-3.2.0/modules/python/src2/cv2.cpp /tmp/opencv_320_python38.patch && \
    cd /tmp/opencv-3.2.0 && mkdir release && cd release && \
    cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=release -DWITH_FFMPEG=OFF -DBUILD_TESTS=OFF -DWITH_CUDA=OFF -DBUILD_PERF_TESTS=OFF -DWITH_IPP=OFF -DENABLE_PRECOMPILED_HEADERS=OFF .. > /dev/null && \
    make -j16 > /dev/null && \
    make -j16 install > /dev/null && \
    rm -rf /tmp/opencv-3.2.0*

# Install DP-PT package and related dependencies
RUN pip install data-pipelines-pytorch==4.2.1 --extra-index-url=https://crd-artifactory.qualcomm.com/artifactory/api/pypi/morpheus-pypi/simple --trusted-host crd-artifactory.qualcomm.com
# Install the cirqus package
RUN pip install cirqus==6.2.0 --pypi-url=https://crd-artifactory.qualcomm.com/artifactory/api/pypi/morpheus-pypi/simple --trusted-host crd-artifactory.qualcomm.com

# upgrade pip
RUN python3 -m pip --no-cache-dir install --upgrade pip

# Install the AIMET package wheel files
COPY *.whl /tmp/
RUN cd /tmp && python3 -m pip install *.whl -f https://download.pytorch.org/whl/torch_stable.html && rm -f /tmp/*.whl

# Remove onnxruntime install in order to fix onnxruntime-gpu
RUN export ONNXRUNTIME_VER=$(python3 -c 'import onnxruntime; print(onnxruntime.__version__)') && \
    python3 -m pip uninstall -y onnxruntime && \
    python3 -m pip --no-cache-dir install onnxruntime-gpu==$ONNXRUNTIME_VER

# Remove existing Pillow & Pillow-SIMD and replace with correct version of Pillow-SIMD.
RUN python3 -m pip uninstall -y Pillow Pillow-SIMD
RUN python3 -m pip --no-cache-dir install Pillow-SIMD==9.0.0.post1
