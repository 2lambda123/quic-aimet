pipeline {
    parameters {
        string(name: 'PROJECT_NAME', defaultValue: 'aimet', description: 'project name')
        string(name: 'BUILD_LABEL', defaultValue: 'docker-build-aimet-pr', description: 'Jenkins node host name or label')
        string(name: 'BUILD_TIMEOUT', defaultValue: '1', description: 'Build timeout in hours')
    }
    agent { label "${params.BUILD_LABEL}" }
    options {
        timestamps()
        timeout( time: 1, unit: 'HOURS' )
    }
    environment{
        def workspace   = pwd()
        def REPO_URL    = sh (script: "git config --get remote.origin.url",     returnStdout: true).trim()
        def REPO_NAME   = sh (script: "basename -s .git ${REPO_URL}",           returnStdout: true).trim()

        PROJECT_ROOT    = "${workspace}/${REPO_NAME}"
        PROJECT_NAME    = "${params.PROJECT_NAME}"
        PROJECT_BRANCH  = "${params.PROJECT_BRANCH}"
        STAGE_EXE       = "pwd; PYTHONPATH=`pwd`/$PYTHONPATH"
        WORKSPACE_ROOT  = "${workspace}"
        XUNIT_XSL_FILE  = "${PROJECT_ROOT}/Jenkins/to-junit.xsl"
    }
    stages {
        stage('Pipelines start') {
            parallel {
                // Start the AIMET pipeline
                stage("AIMET start") {
                    stages {
                        stage('Setup') {
                            steps {
                                echo 'moving all files and folders!'
                                sh 'bash -l -c "rm -rf ./${REPO_NAME} | true"'
                                sh 'bash -l -c "mkdir ${REPO_NAME}"'
                                // moving all files and folders except current and parent into ${REPO_NAME} folder
                                sh 'mv `ls -1a | grep -v "^${REPO_NAME}$" | grep -v "^\\.$" | grep -v "^\\.\\.$" ` ${REPO_NAME}'
                                script{
                                    // load threshold file to be used for unit test and code quality reporting
                                    def THRESHOLD_FILE = "${PROJECT_ROOT}/Jenkins/jenkins_threshold_configs.json"
                                    if (!fileExists("${THRESHOLD_FILE}")) {
                                        error("Error: Threshold file must be specified for project. ${THRESHOLD_FILE} does not exist.")
                                    }

                                    echo "Loading Thresholds Config  file"
                                    THRESHOLD_OBJ = readJSON file: "${PROJECT_ROOT}/Jenkins/jenkins_threshold_configs.json";
                               }
                            }
                        }

                        stage('Check commits') {
                            steps {
                                echo 'Running commit checks...'
                                script{
                                    env.REPO_OR_FORK_URL = "${REPO_URL}"
                                    if (env.CHANGE_FORK != null) {
                                        env.REPO_OR_FORK_URL = "https://github.com/${env.CHANGE_FORK}/aimet"
                                    }
                                }
                                sh "bash -l -c \"git clone ${env.REPO_OR_FORK_URL} -b ${env.CHANGE_BRANCH} commit_checks_repo\""
                                withCredentials([usernameColonPassword(credentialsId: 'neoci-pat', variable: 'USERPASS')]) {
                                    sh "bash -l -c \"cd ${REPO_NAME} && ${env.DEPENDENCY_DATA_PATH}/commit_check/commit-checks.sh \""
                                }
                                sh "bash -l -c \"rm -rf commit_checks_repo\""
                            }
                        }

                        stage('Build') {
                            steps {
                                echo 'Building code...'
                                sh 'bash -l -c "cd ${REPO_NAME} && ./buildntest.sh -b"'
                            }
                        }

                        stage('Code violations') {
                            steps {
                                echo 'Running code violations...'
                                sh 'bash -l -c "cd ${REPO_NAME} && ./buildntest.sh -v"'
                            }
                            post {
                                always {
                                    step([
                                            $class                      : 'WarningsPublisher',
                                            parserConfigurations        : [[
                                                                            parserName: 'PYLint',
                                                                            pattern   : "**/**/**/*pylint_results.out"
                                                                          ]],
                                            failedTotalHigh             : THRESHOLD_OBJ.pylint_fail_thresholds.high_priority,
                                            failedTotalNormal           : THRESHOLD_OBJ.pylint_fail_thresholds.normal_priority,
                                            failedTotalLow              : THRESHOLD_OBJ.pylint_fail_thresholds.low_priority,
                                            usePreviousBuildAsReference : true
                                    ])
                                    script {
                                        if (currentBuild.currentResult.equals("FAILURE")) {
                                            // the plugin won't fail the stage.  it only sets the build status, so we have to fail it
                                            // manually
                                            sh "exit 1"
                                        }
                                    }
                                }
                            }
                        }

                        stage('Unit tests') {
                            steps {
                                echo 'Building code and running tests...'
                                sh 'bash -l -c "cd ${REPO_NAME} && ./buildntest.sh -u"'
                            }
                            post {            
                                always {
                                    // Parse CTest, Junit, or GoogleTest results
                                    step([$class: 'XUnitBuilder', testTimeMargin: '3000', thresholdMode: THRESHOLD_OBJ.unittests_thresholds.threshold_mode,
                                          thresholds: [
                                                [$class: 'FailedThreshold',
                                                    failureNewThreshold: THRESHOLD_OBJ.unittests_thresholds.failed_thresholds.new_tests,
                                                    failureThreshold: THRESHOLD_OBJ.unittests_thresholds.failed_thresholds.total_tests,
                                                    unstableNewThreshold: '',
                                                    unstableThreshold: ''],
                                                [$class: 'SkippedThreshold',
                                                    failureNewThreshold: THRESHOLD_OBJ.unittests_thresholds.skipped_thresholds.new_tests,
                                                    failureThreshold: THRESHOLD_OBJ.unittests_thresholds.skipped_thresholds.total_tests,
                                                    unstableNewThreshold: '',
                                                    unstableThreshold: '']],
                                          tools: [
                                                [$class: 'CustomType',
                                                    customXSL: "${XUNIT_XSL_FILE}",
                                                    deleteOutputFiles: false,
                                                    failIfNotNew: false,
                                                    pattern: "**/unit_test_results/**/*.xml",
                                                    skipNoTestFiles: true,
                                                    stopProcessingIfError: false]
                                          ]
                                    ])
                                    script {
                                        if (currentBuild.currentResult.equals("FAILURE")) {
                                            // the plugin won't fail the stage.  it only sets the build status, so we have to fail it
                                            // manually
                                            sh "exit 1"
                                        }
                                    }
                                }
                            }
                        }

                        stage('Code coverage') {
                            steps {
                                echo 'Running code coverage...'
                                sh 'bash -l -c "cd ${REPO_NAME} && ./buildntest.sh -g"'
                                script{
                                    linecovtargets_pass = THRESHOLD_OBJ.line_cov_targets_thresholds.mark_as_pass
                                    linecovtargets_fail = THRESHOLD_OBJ.line_cov_targets_thresholds.mark_as_fail
                                    linecovtargets_unstable = THRESHOLD_OBJ.line_cov_targets_thresholds.mark_as_unstable
                                }
                            }
                            post {
                                always {
                                    step([
                                          $class: 'CoberturaPublisher',
                                          autoUpdateHealth: false,
                                          autoUpdateStability: false,
                                          coberturaReportFile: '**/coverage_test_results/**/code_coverage.xml',
                                          conditionalCoverageTargets: '70, 0, 0',
                                          fileCoverageTargets: '70, 0, 0',
                                          lineCoverageTargets: "${linecovtargets_pass}, ${linecovtargets_fail}, ${linecovtargets_unstable}",
                                          methodCoverageTargets: '80, 0, 0',
                                          packageCoverageTargets: '70, 0, 0',
                                          maxNumberOfBuilds: 10,
                                          onlyStable: false,
                                          sourceEncoding: 'ASCII',
                                          zoomCoverageChart: false,
                                          failNoReports: false,
                                          failUnhealthy: true,
                                          failUnstable: false
                                    ])
                                    script {
                                        if (currentBuild.currentResult.equals("FAILURE")) {
                                            // the plugin won't fail the stage.  it only sets the build status, so we have to fail it
                                            // manually
                                            sh "exit 1"
                                        }
                                    }             
                                }
                            }
                        }

                        stage('Static analysis') {
                            steps {
                                echo 'Running static analysis...'
                                sh 'bash -l -c "cd ${REPO_NAME} && ./buildntest.sh -s"'
                            }
                        }
                    }
                }
                //Start an optional pipeline to perform additional testing
                stage("AIMET extra start") {
                    stages {
                        stage('AIMET extra ALL STAGES') {
                            steps {
                                script {
                                    if ("${env.QCInternalValidation}" == "true") {
                                        echo 'Running AIMET additional stages...'
                                        build job: "AIMET-Extra", parameters: [string(name: 'AIMET_GIT_COMMIT', value: "${CHANGE_BRANCH}")]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                if (currentBuild.currentResult.equals("SUCCESS")) {
                    echo 'Finished pull request Jenkins file'
                }
            }
        }
    }
}
